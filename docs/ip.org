#+title: ip.lisp documentation and testing
#+startup: overview

* Summary 
** Keyword Summary
   
   dotted *hw-numerical-type* parse-ip  

** Executive Summary
   Lot's of protocols are not 4 octets or 8 octets, so we are 
   implementing such that we don't care about size


* Terms and Definitions
** Dynamic Variable *hw-numerical-type*
   A dynamic variable that controls how IP addresses and numbers are
   computed.

   The code could be performing a computation for a target for
   instance, and we want to ignore the integer-hw-type of the machine
   that is doing the computation.


* Parse an ip addresss
** Vectors and lists
** Strings
*** Dotted
**** dotted->host
**** dotted->net

**** parse-address
    Lisp has a long history of parse-number, parse-int, parse-float ...
*** Hex


* Use Cases

**  Parse a string IP address and increment the last octet.


#+RESULTS:
: 1.2.3.5


** num->octets
#+BEGIN_SRC lisp
   (num->dotted 1 :length 4)
#+END_SRC

#+RESULTS:
| 1 | 0 | 0 | 0 |

** Read in a dotted into a number. Inc it and then print it out
#+BEGIN_SRC lisp
  (let ((v (snot::dotted->num "1.2.3.33")))
    (incf v)
    (snot::num->dotted v))
#+END_SRC



* Tests
** Parsing IP Addresses

#+name: google-name-server
#+BEGIN_SRC text
8.8.8.8
#+END_SRC


#+name: ip1234
#+begin_src text
1.2.3.4
#+end_src


#+BEGIN_SRC lisp
  (sockets:dotted-to-vector "1.2.3.4")
#+END_SRC

#+RESULTS:
| 1 | 2 | 3 | 4 |


* Development
#+BEGIN_SRC lisp
  (ql:quickload :sockets)
(defun na->dotted-string (n)
  (sockets:integer-to-dotted n))

(defun htoa(haddr-uint32)
  "take a uint32 in host byte order and turn it into an ip address string"
  (let ((A (gethash haddr-uint32 *htoa-cache*)))
    (unless (stringp A)
      (setf A (handler-case
		  (multiple-value-bind
			(ipaddress more-addresses canonical-name more-hostnames)
		      (sockets:lookup-hostname haddr-uint32)
		    canonical-name)
		(resolver-fail-error ()
		  (sockets:integer-to-dotted haddr-uint32))
		(resolver-no-name-error ()
		  (sockets:integer-to-dotted haddr-uint32))))
      (setf (gethash haddr-uint32 *htoa-cache*) A))
    A))

(defun ntoa (naddr)
  "Takes an ipv4 network address (4 bytes) and returns the hostname.
This will cache the value for an extended amount of time.  This will
also handle any errors from the dns resolver."
  (htoa (swap-bytes:ntohl naddr))
  )

#+END_SRC
